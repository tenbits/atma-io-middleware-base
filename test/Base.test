import { } from '../src/Compiler';
let io = require('atma-io');

UTest({
	$teardown () {
		io.File.setMiddlewares({
			js: [],
			lowered_txt: [],
			txt: []
		})
	},
	'simple middleware for an extension' () {
		Base.create({
			name: 'txt_make_upper',
			defaultOptions: {
				extensions: {
					lowered_txt: 'read'
				}
			},
			process: assert.await(function(content){
				return { content: content.toUpperCase() }
			})
		}, io);
		
		var content = io.File.read('/test/fixtures/foo.lowered_txt');
		eq_(content, 'FOO');
	},
	'simple middleware for regexp' () {
		Base.create({
			name: 'txt_boo_upper',
			defaultOptions: {
				extensions: {
					'/boo/': 'read'
				}
			},
			process: assert.await(function(content){
				return { content: content.toUpperCase() }
			})
		}, io);
		
		var content = io.File.read('/test/fixtures/book.txt');
		eq_(content, 'DORIAN');
	},
	'middlewares for a virtual file' () {
		Base.create({
			name: 'my_virtual_file',
			isVirtualHandler: true,
			defaultOptions: {
				extensions: {
					'/main_mem/': 'read'
				},				
			},
			process: assert.await(function(content){
				return { content: 'hello' };
			})
		}, io);

		Base.create({
			name: 'my_virtual_file_toUpper',
			defaultOptions: {
				extensions: {
					'/main_mem/': 'read'
				}				
			},
			process: assert.await(function(content){
				return { content: content.toUpperCase() };
			})
		}, io);
		
		var content = io.File.read('/test/fixtures/main_memory.txt');
		eq_(content, 'HELLO');
	},
	'should write to custom logger' () {
		let logger = sinon.spy();
		Base.create({
			name: 'txt_make_upper',
			defaultOptions: {
				extensions: {
					lowered_txt: 'read'
				},
				logger: {
					type: 'custom',
					write: logger
				}
			},
			process: assert.await(function(content, file, compiler){

				compiler.logger.write('Hello')
				return { content: content.toUpperCase() }
			}),			
		}, io);
		
		var content = io.File.read('/test/fixtures/foo.lowered_txt');
		eq_(content, 'FOO');
		deepEq_(logger.args, [ ['Hello'] ]);
	},
	'fails the middleware': {
		'$before' () {
			Base.create({
				name: 'txt_make_upper',
				defaultOptions: {
					extensions: {
						lowered_txt: 'read'
					}				
				},
				process (content){
					throw Error('My Sync Error');
				},
				processAsync () {					
					return Promise.reject(Error('My Async Error'));
				}
			}, io);			
		},	
		'should fail async' (done) {
			io
				.File
				.readAsync('/test/fixtures/foo.lowered_txt')
				.done(assert.avoid())
				.fail(error => {
					eq_(error.message, 'My Async Error');
					done();
				});		
		},
		'should fail sync' () {
			assert.throws(() => {
				io.File.read('/test/fixtures/foo.lowered_txt')
			})

			try {
				io.File.read('/test/fixtures/foo.lowered_txt')
			}
			catch (error) {
				eq_(error.message, 'My Sync Error');
			}
			
		}
	}	
})